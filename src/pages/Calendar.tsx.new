import { useState } from 'react';
import { format, addMonths, subMonths, isSameMonth, isToday, isSameDay } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import { MembersLayout } from '@/components/layouts/MembersLayout';
import { Button } from "@/components/ui/button";
import { Calendar as CalendarIcon, Plus, ChevronLeft, ChevronRight, Search, Filter } from 'lucide-react';
import { Calendar } from "@/components/ui/calendar";
import { Input } from '@/components/ui/input';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { 
  Tabs, 
  TabsContent, 
  TabsList, 
  TabsTrigger 
} from '@/components/ui/tabs';
import { 
  Dialog, 
  DialogContent, 
  DialogDescription, 
  DialogHeader, 
  DialogTitle 
} from '@/components/ui/dialog';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { 
  Tooltip, 
  TooltipContent, 
  TooltipProvider, 
  TooltipTrigger 
} from '@/components/ui/tooltip';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { useEvents } from '@/hooks/use-events';
import { cn } from '@/lib/utils';
import { Event } from '@/types/events';
import { AddEventDialog } from '@/components/AddEventDialog';

// Interface para eventos do calendário (versão estendida do evento padrão)
interface CalendarEvent extends Event {
  startDate?: Date;
  endDate?: Date;
  color?: string;
}

const CalendarPage = () => {
  const { events, isLoading, createEvent } = useEvents();
  const [currentMonth, setCurrentMonth] = useState<Date>(new Date());
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());
  const [calendarView, setCalendarView] = useState<'month' | 'agenda'>('month');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState('all');
  const [isEventDetailsOpen, setIsEventDetailsOpen] = useState(false);
  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);
  const [isAddEventOpen, setIsAddEventOpen] = useState(false);
  const { toast } = useToast();

  // Processamento de eventos para o formato de calendário
  const calendarEvents: CalendarEvent[] = Array.isArray(events) ? events.map(event => {
    console.log("Processando evento:", event);
    
    // Converter string de data para objeto Date
    let startDate: Date;
    try {
      const dateParts = event.date.split('/');
      if (dateParts.length === 3) {
        // Formato brasileiro/português: DD/MM/YYYY
        startDate = new Date(
          parseInt(dateParts[2]), // ano
          parseInt(dateParts[1]) - 1, // mês (0-indexed)
          parseInt(dateParts[0]) // dia
        );
        
        // Definir a hora para meio-dia para evitar problemas com fuso horário
        startDate.setHours(12, 0, 0, 0);
      } else {
        // Fallback para formato ISO
        startDate = new Date(event.date);
        startDate.setHours(12, 0, 0, 0);
      }
      
      // Verificar se a data é válida
      if (isNaN(startDate.getTime())) {
        console.error(`Data inválida para evento ${event.id}: ${event.date}`);
        startDate = new Date(); // Fallback para data atual
        startDate.setHours(12, 0, 0, 0);
      }
    } catch (error) {
      console.error(`Erro ao processar data do evento ${event.id}:`, error);
      startDate = new Date(); // Fallback para data atual
      startDate.setHours(12, 0, 0, 0);
    }
    
    console.log(`Evento ${event.id}: Data original ${event.date}, convertida para ${format(startDate, 'yyyy-MM-dd HH:mm')}`);
    
    // Determinar cor por tipo de evento
    let color = '#e11d48'; // mouro-red por padrão
    
    // Normalizar o tipo para lidar com diferentes formatos (com ou sem underscore)
    const normalizedType = (event.type || '').replace('-', '_').toLowerCase();
    
    switch(normalizedType) {        
      case 'trail':
        color = '#16a34a'; // green-600
        break;
      case 'estrada':
        color = '#2563eb'; // blue-600
        break;
      case 'encontro':
        color = '#9333ea'; // purple-600
        break;
      case 'solidario':
        color = '#d97706'; // amber-600
        break;
      case 'visita':
        color = '#ef4444'; // red-500
        break;
      case 'visita_recebida':
      case 'visita-recebida':
        color = '#f97316'; // orange-500
        break;
      case 'concentracao':
        color = '#0ea5e9'; // sky-500
        break;
      case 'interno':
      case 'evento_interno':
      case 'evento-interno':
        color = '#8b5cf6'; // violet-500
        break;
    }
    
    return {
      ...event,
      startDate,
      endDate: event.registrationDeadline ? new Date(event.registrationDeadline) : startDate,
      color
    };
  }) : [];

  // Filtrar eventos por mês atual e por filtros aplicados
  const filteredEvents = calendarEvents.filter(event => {
    // Verificar se o evento tem uma data de início válida
    if (!event.startDate || isNaN(event.startDate.getTime())) {
      console.warn(`Evento com data inválida excluído dos filtros: ${event.id} - ${event.title}`);
      return false;
    }
    
    // Filtro por mês corrente quando na visualização mensal
    // Na visualização de agenda, mostrar todos os eventos independentemente do mês
    const inCurrentMonth = calendarView === 'agenda' || 
      (event.startDate && isSameMonth(event.startDate, currentMonth));
    
    // Filtro por termo de busca
    const matchesSearch = searchTerm === '' || 
      (event.title && event.title.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (event.description && event.description.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (event.location && event.location.toLowerCase().includes(searchTerm.toLowerCase()));
    
    // Filtro por tipo, com normalização do tipo
    let normalizedEventType = (event.type || '').replace('-', '_').toLowerCase();
    let normalizedFilterType = (filterType || '').replace('-', '_').toLowerCase();
    
    const matchesType = filterType === 'all' || normalizedEventType === normalizedFilterType;
    
    return inCurrentMonth && matchesSearch && matchesType;
  });

  // Obter eventos do dia selecionado
  const eventsOnSelectedDate = selectedDate ? 
    filteredEvents.filter(event => {
      if (!event.startDate) return false;
      
      try {
        // Normalizar as datas para comparação (ignorando a hora)
        const eventDate = new Date(event.startDate);
        eventDate.setHours(0, 0, 0, 0);
        
        const compareDate = new Date(selectedDate);
        compareDate.setHours(0, 0, 0, 0);
        
        const isSameDate = eventDate.getTime() === compareDate.getTime();
        
        if (isSameDate) {
          console.log(`Evento para a data selecionada ${format(selectedDate, 'yyyy-MM-dd')}: ${event.title}`);
        }
        return isSameDate;
      } catch (error) {
        console.error(`Erro ao comparar datas para evento ${event.id}:`, error);
        return false;
      }
    }) :
    [];
    
  console.log(`Total de eventos para ${selectedDate ? format(selectedDate, 'dd/MM/yyyy') : 'nenhuma data'}:`, eventsOnSelectedDate.length);

  // Navegar para o mês anterior
  const goToPreviousMonth = () => {
    setCurrentMonth(prev => subMonths(prev, 1));
  };

  // Navegar para o próximo mês
  const goToNextMonth = () => {
    setCurrentMonth(prev => addMonths(prev, 1));
  };

  // Manipular clique em um evento
  const handleEventClick = (event: CalendarEvent) => {
    setSelectedEvent(event);
    setIsEventDetailsOpen(true);
  };

  // Mapear dias com eventos para destacar no calendário
  const daysWithEvents = filteredEvents.reduce((acc, event) => {
    if (event.startDate) {
      try {
        const dateString = format(event.startDate, 'yyyy-MM-dd');
        if (!acc[dateString]) {
          acc[dateString] = [];
        }
        acc[dateString].push(event);
        console.log(`Evento mapeado para ${dateString}:`, event.title);
      } catch (error) {
        console.error(`Erro ao formatar data para evento ${event.id}:`, error);
      }
    } else {
      console.warn(`Evento sem data de início definida:`, event);
    }
    return acc;
  }, {} as Record<string, CalendarEvent[]>);
  
  console.log("Dias com eventos:", Object.keys(daysWithEvents).length, daysWithEvents);

  return (
    <MembersLayout>
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-4xl font-display text-mouro-black mb-8">
          <span className="text-mouro-red">Agenda</span> da Direção
        </h1>
        
        {/* Barra de filtros */}
        <div className="flex flex-col md:flex-row gap-4 mb-8">
          <div className="relative flex-grow">
            <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Pesquisar compromissos..."
              className="pl-10"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <Select
            value={filterType}
            onValueChange={setFilterType}
          >
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Filtrar por tipo" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">Todos os tipos</SelectItem>
              <SelectItem value="visita">Visita a MC</SelectItem>
              <SelectItem value="visita_recebida">Visita Recebida</SelectItem>
              <SelectItem value="concentracao">Concentração</SelectItem>
              <SelectItem value="interno">Evento Interno</SelectItem>
              <SelectItem value="trail">Trail</SelectItem>
              <SelectItem value="estrada">Estrada</SelectItem>
              <SelectItem value="solidario">Solidário</SelectItem>
              <SelectItem value="encontro">Encontro</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Navegação do calendário */}
        <div className="flex justify-between items-center mb-6">
          <div className="flex items-center">
            <Button variant="outline" size="icon" onClick={goToPreviousMonth}>
              <ChevronLeft className="h-4 w-4" />
            </Button>
            <h2 className="mx-4 font-bold">
              {format(currentMonth, 'MMMM yyyy', { locale: ptBR })}
            </h2>
            <Button variant="outline" size="icon" onClick={goToNextMonth}>
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
          <div className="flex items-center gap-2">
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => setCurrentMonth(new Date())}
            >
              Hoje
            </Button>
            <Button
              className="bg-mouro-red hover:bg-mouro-red/90 text-white"
              size="sm"
              onClick={() => setIsAddEventOpen(true)}
            >
              <Plus className="h-4 w-4 mr-2" />
              Agendar Compromisso
            </Button>
          </div>
        </div>
        
        {/* Sistema de abas */}
        <Tabs 
          value={calendarView} 
          onValueChange={(v) => setCalendarView(v as 'month' | 'agenda')}
          className="w-full"
        >
          <TabsList className="grid grid-cols-2 w-[200px] mb-6 ml-auto">
            <TabsTrigger value="month">
              <CalendarIcon className="h-4 w-4 mr-2" />
              Mês
            </TabsTrigger>
            <TabsTrigger value="agenda">
              <Filter className="h-4 w-4 mr-2" />
              Agenda
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="month">
            <Card className="border shadow-sm">
              <CardHeader>
                <CardTitle className="text-center">Agenda Mensal</CardTitle>
              </CardHeader>
              <CardContent className="px-2 pb-4">
                <div className="p-3">
                  <Calendar
                    mode="single"
                    selected={selectedDate}
                    onSelect={setSelectedDate}
                    month={currentMonth}
                    onMonthChange={setCurrentMonth}
                    className="w-full"
                    components={{
                      Day: ({ date }) => {
                        const dateString = format(date, 'yyyy-MM-dd');
                        const events = daysWithEvents[dateString] || [];
                        
                        return (
                          <TooltipProvider>
                            <Tooltip delayDuration={300}>
                              <TooltipTrigger asChild>
                                <div 
                                  onClick={() => setSelectedDate(date)} 
                                  className={cn(
                                    "relative flex items-center justify-center",
                                    events.length > 0 && 'font-medium'
                                  )}
                                >
                                  <div 
                                    className={cn(
                                      "h-9 w-9 p-0 flex items-center justify-center rounded-md text-sm transition-colors",
                                      isToday(date) && "bg-accent text-accent-foreground",
                                      selectedDate && isSameDay(date, selectedDate) && "bg-primary text-primary-foreground",
                                      !isSameMonth(date, currentMonth) && "text-muted-foreground opacity-50"
                                    )}
                                  >
                                    {format(date, 'd')}
                                  </div>
                                  {/* Dots para indicar eventos */}
                                  {events && events.length > 0 ? (
                                    <div className="absolute -bottom-1 flex gap-0.5 justify-center">
                                      {events.slice(0, 3).map((event, i) => (
                                        <div 
                                          key={`dot-${dateString}-${i}`} 
                                          className="h-1.5 w-1.5 rounded-full" 
                                          style={{ backgroundColor: event.color || '#e11d48' }}
                                        />
                                      ))}
                                      {events.length > 3 && (
                                        <div className="h-1.5 w-1.5 rounded-full bg-gray-400" />
                                      )}
                                    </div>
                                  ) : null}
                                </div>
                              </TooltipTrigger>
                              {events && events.length > 0 && (
                                <TooltipContent>
                                  <div className="space-y-1">
                                    <p className="font-medium text-xs">{events.length} evento(s):</p>
                                    {events.slice(0, 3).map((event, i) => (
                                      <p key={`tooltip-${dateString}-${i}`} className="text-xs">
                                        {event.title}
                                      </p>
                                    ))}
                                    {events.length > 3 && (
                                      <p className="text-xs text-muted-foreground">
                                        + {events.length - 3} mais...
                                      </p>
                                    )}
                                  </div>
                                </TooltipContent>
                              )}
                            </Tooltip>
                          </TooltipProvider>
                        );
                      }
                    }}
                  />
                </div>
              </CardContent>
            </Card>
            
            {/* Lista de eventos do dia selecionado */}
            {selectedDate && (
              <Card className="mt-8 border shadow-sm">
                <CardHeader>
                  <CardTitle className="text-xl">
                    Eventos de {format(selectedDate, 'dd/MM/yyyy')}
                  </CardTitle>
                  <CardDescription>
                    {eventsOnSelectedDate.length === 0 
                      ? "Nenhum evento agendado para esta data" 
                      : `${eventsOnSelectedDate.length} evento(s) agendado(s)`
                    }
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {isLoading ? (
                    <div className="flex justify-center items-center h-32">
                      <p>Carregando eventos...</p>
                    </div>
                  ) : eventsOnSelectedDate.length > 0 ? (
                    <div className="space-y-4">
                      {eventsOnSelectedDate.map((event) => (
                        <div 
                          key={event.id} 
                          className="flex items-start border rounded-lg p-3 cursor-pointer hover:bg-gray-50"
                          onClick={() => handleEventClick(event)}
                        >
                          <div 
                            className="w-2 h-12 rounded-full mr-4 my-1" 
                            style={{ backgroundColor: event.color || '#e11d48' }}
                          />
                          <div className="flex-grow">
                            <div className="flex items-center justify-between">
                              <h3 className="font-medium">{event.title}</h3>
                              <Badge 
                                className={cn(
                                  "ml-2",
                                  event.type === "trail" ? "bg-green-600 text-white" : 
                                  event.type === "estrada" ? "bg-blue-600 text-white" : 
                                  event.type === "solidario" ? "bg-amber-600 text-white" : 
                                  event.type === "visita" ? "bg-red-500 text-white" :
                                  event.type === "visita_recebida" ? "bg-orange-500 text-white" :
                                  event.type === "concentracao" ? "bg-sky-500 text-white" :
                                  "bg-purple-600 text-white"
                                )}
                              >
                                {event.type.charAt(0).toUpperCase() + event.type.slice(1).replace('_', ' ')}
                              </Badge>
                            </div>
                            <p className="text-sm text-muted-foreground line-clamp-1">{event.location}</p>
                            <div className="flex items-center text-xs text-muted-foreground mt-1">
                              <CalendarIcon className="h-3 w-3 mr-1" />
                              <span>{event.date}</span>
                              {event.registrationDeadline && (
                                <span className="ml-2">
                                  (Inscrições até {new Date(event.registrationDeadline).toLocaleDateString()})
                                </span>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-6">
                      <CalendarIcon className="h-12 w-12 mx-auto text-muted-foreground opacity-30" />
                      <p className="mt-2 text-muted-foreground">Nenhum evento agendado para esta data</p>
                      <p className="text-sm text-muted-foreground">Selecione outra data ou crie um novo evento</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}
          </TabsContent>
          
          <TabsContent value="agenda">
            <Card className="border shadow-sm">
              <CardHeader>
                <CardTitle className="text-xl">Lista de Compromissos</CardTitle>
                <CardDescription>
                  {filteredEvents.length === 0 
                    ? "Nenhum evento agendado para este período" 
                    : `${filteredEvents.length} evento(s) agendado(s)`
                  }
                </CardDescription>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  <div className="flex justify-center items-center h-64">
                    <p>Carregando eventos...</p>
                  </div>
                ) : filteredEvents.length === 0 ? (
                  <div className="text-center py-12">
                    <CalendarIcon className="h-12 w-12 mx-auto text-muted-foreground opacity-30" />
                    <p className="mt-2 text-muted-foreground">Nenhum evento encontrado</p>
                    <p className="text-sm text-muted-foreground">
                      Tente ajustar os filtros ou criar um novo evento
                    </p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {filteredEvents
                      .sort((a, b) => (a.startDate?.getTime() || 0) - (b.startDate?.getTime() || 0))
                      .map((event) => (
                        <div 
                          key={event.id} 
                          className="flex items-start border rounded-lg p-3 cursor-pointer hover:bg-gray-50"
                          onClick={() => handleEventClick(event)}
                        >
                          <div 
                            className="w-2 h-16 rounded-full mr-4 my-1" 
                            style={{ backgroundColor: event.color || '#e11d48' }}
                          />
                          <div className="flex-grow">
                            <div className="flex items-center justify-between">
                              <h3 className="font-medium">{event.title}</h3>
                              <Badge 
                                className={cn(
                                  "ml-2",
                                  event.type === "trail" ? "bg-green-600 text-white" : 
                                  event.type === "estrada" ? "bg-blue-600 text-white" : 
                                  event.type === "solidario" ? "bg-amber-600 text-white" :
                                  event.type === "visita" ? "bg-red-500 text-white" :
                                  event.type === "visita_recebida" ? "bg-orange-500 text-white" :
                                  event.type === "concentracao" ? "bg-sky-500 text-white" :
                                  "bg-purple-600 text-white"
                                )}
                              >
                                {event.type ? event.type.charAt(0).toUpperCase() + event.type.slice(1).replace('_', ' ') : 'Encontro'}
                              </Badge>
                            </div>
                            <p className="text-sm text-muted-foreground">{event.location}</p>
                            <div className="flex items-center text-xs text-muted-foreground mt-1">
                              <CalendarIcon className="h-3 w-3 mr-1" />
                              <span>{event.date}</span>
                              {event.registrationDeadline && (
                                <span className="ml-2">
                                  (Inscrições até {new Date(event.registrationDeadline).toLocaleDateString()})
                                </span>
                              )}
                            </div>
                            <p className="text-xs text-muted-foreground mt-1 line-clamp-1">{event.description}</p>
                          </div>
                        </div>
                      ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Dialog para detalhes do evento */}
        {selectedEvent && (
          <Dialog open={isEventDetailsOpen} onOpenChange={setIsEventDetailsOpen}>
            <DialogContent className="sm:max-w-[600px]">
              <DialogHeader>
                <DialogTitle className="text-xl">{selectedEvent.title}</DialogTitle>
                <DialogDescription>
                  <div className="flex flex-wrap gap-2 mt-2">
                    <Badge 
                      className={cn(
                        selectedEvent.type === "trail" ? "bg-green-600 text-white" : 
                        selectedEvent.type === "estrada" ? "bg-blue-600 text-white" : 
                        selectedEvent.type === "solidario" ? "bg-amber-600 text-white" :
                        selectedEvent.type === "visita" ? "bg-red-500 text-white" :
                        selectedEvent.type === "visita_recebida" ? "bg-orange-500 text-white" :
                        selectedEvent.type === "concentracao" ? "bg-sky-500 text-white" :
                        "bg-purple-600 text-white"
                      )}
                    >
                      {selectedEvent.type.charAt(0).toUpperCase() + selectedEvent.type.slice(1).replace('_', ' ')}
                    </Badge>
                    {selectedEvent.membersOnly && <Badge variant="outline">Apenas Sócios</Badge>}
                  </div>

                  <div className="w-full h-52 overflow-hidden rounded-md my-4">
                    <img 
                      src={selectedEvent.image} 
                      alt={selectedEvent.title} 
                      className="w-full h-full object-cover"
                    />
                  </div>
                  
                  <div className="space-y-2 mt-4">
                    <div className="flex items-center">
                      <CalendarIcon className="h-4 w-4 mr-2 text-mouro-red" />
                      <span className="font-medium">Data:</span>
                      <span className="ml-2">{selectedEvent.date}</span>
                    </div>
                    
                    <div className="flex items-start">
                      <div className="flex-shrink-0 mt-1">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2 text-mouro-red">
                          <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z"></path>
                          <circle cx="12" cy="10" r="3"></circle>
                        </svg>
                      </div>
                      <div>
                        <span className="font-medium">Local:</span>
                        <span className="ml-2">{selectedEvent.location}</span>
                      </div>
                    </div>
                    
                    {selectedEvent.description && (
                      <div className="mt-4 pt-2 border-t">
                        <p className="text-sm">{selectedEvent.description}</p>
                      </div>
                    )}
                    
                    {selectedEvent.maxParticipants && (
                      <div className="flex items-center mt-2">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2 text-mouro-red">
                          <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path>
                          <circle cx="9" cy="7" r="4"></circle>
                          <path d="M22 21v-2a4 4 0 0 0-3-3.87"></path>
                          <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                        </svg>
                        <span className="font-medium">Participantes:</span>
                        <span className="ml-2">
                          {selectedEvent.participants ?? 0}/{selectedEvent.maxParticipants} 
                          {selectedEvent.registrationDeadline && (
                            <span className="text-xs text-muted-foreground ml-2">
                              (Inscrições até {new Date(selectedEvent.registrationDeadline).toLocaleDateString()})
                            </span>
                          )}
                        </span>
                      </div>
                    )}
                  </div>
                </DialogDescription>
              </DialogHeader>
              <div className="flex justify-end space-x-2">
                <Button variant="outline" onClick={() => setIsEventDetailsOpen(false)}>
                  Fechar
                </Button>
                <Button 
                  className="bg-mouro-red hover:bg-mouro-red/90"
                  onClick={() => {
                    toast({
                      title: "Acesso ao evento",
                      description: "Redirecionando para a página completa do evento...",
                    });
                    setIsEventDetailsOpen(false);
                  }}
                >
                  Ver Detalhes
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        )}

        {/* Dialog para adicionar evento */}
        <AddEventDialog 
          isOpen={isAddEventOpen} 
          onClose={() => setIsAddEventOpen(false)}
          onAddEvent={async (newEvent) => {
            try {
              console.log("Tentando criar novo evento:", newEvent);
              await createEvent(newEvent);
              
              // Se o evento tiver uma data, selecionar essa data no calendário
              if (newEvent._isoDate) {
                const eventDate = new Date(newEvent._isoDate);
                setSelectedDate(eventDate);
                setCurrentMonth(eventDate);
                console.log("Data do evento selecionada:", eventDate);
              }
              
              toast({
                title: "Sucesso",
                description: "Evento criado com sucesso. Atualizando calendário...",
              });
              
              // Forçar uma atualização do componente após criar um evento
              setTimeout(() => {
                setFilterType(filterType); // Este truque força um re-render
              }, 500);
              
              return Promise.resolve();
            } catch (error) {
              console.error("Erro ao criar evento:", error);
              return Promise.reject(error);
            }
          }}
        />
      </div>
    </MembersLayout>
  );
};

export default CalendarPage;
